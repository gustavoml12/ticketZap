version: '3.8'

services:
  backend:
    container_name: backend-${COOLIFY_SERVICE_ID}
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgres://postgres:iqF7IxfouW0Hskx0wL6gj8lp3R7dJiqXIkAViqGt2LZMrlypC6OkDeSlmxM5IfoP@twkw00kcwco0skoss80000c4:5432/postgres
      # Usando o IP correto do Redis (10.0.2.18)
      - REDIS_URI=redis://default:rZzhHPOIoCFkQ72GtiPFmX852eji4fjON2llkUMT4njZneILmtbnQGIAS7TIviNY@10.0.2.18:6379/0
      - JWT_SECRET=${JWT_SECRET}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ADMIN_NAME=${ADMIN_NAME}
      - ADMIN_PHONE=${ADMIN_PHONE}
      - ADMIN_DEPARTMENT=${ADMIN_DEPARTMENT}
      - ADMIN_ROLE=${ADMIN_ROLE}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_REJECT_UNAUTHORIZED=${SMTP_REJECT_UNAUTHORIZED}
      - WHATSAPP_ENABLED=${WHATSAPP_ENABLED}
      - WHATSAPP_WEBHOOK_URL=${WHATSAPP_WEBHOOK_URL}
      - WHATSAPP_API_URL=${WHATSAPP_API_URL}
      - WHATSAPP_API_TOKEN=${WHATSAPP_API_TOKEN}
      - WHATSAPP_WEBHOOK_TOKEN=${WHATSAPP_WEBHOOK_TOKEN}
      - WHATSAPP_WEBHOOK_VERIFY_TOKEN=${WHATSAPP_WEBHOOK_VERIFY_TOKEN}
      - WHATSAPP_WEBHOOK_VERIFY_MODE=${WHATSAPP_WEBHOOK_VERIFY_MODE}
      - WHATSAPP_WEBHOOK_VERIFY_SIGNATURE=${WHATSAPP_WEBHOOK_VERIFY_SIGNATURE}
      - WHATSAPP_WEBHOOK_VERIFY_SIGNATURE_KEY=${WHATSAPP_WEBHOOK_VERIFY_SIGNATURE_KEY}
      - WHATSAPP_WEBHOOK_VERIFY_SIGNATURE_ALGORITHM=${WHATSAPP_WEBHOOK_VERIFY_SIGNATURE_ALGORITHM}
      - WHATSAPP_WEBHOOK_VERIFY_SIGNATURE_HEADER=${WHATSAPP_WEBHOOK_VERIFY_SIGNATURE_HEADER}
      - WHATSAPP_WEBHOOK_VERIFY_SIGNATURE_HEADER_VALUE=${WHATSAPP_WEBHOOK_VERIFY_SIGNATURE_HEADER_VALUE}
      - UPLOAD_DIR=/usr/src/app/uploads
      - PUBLIC_DIR=/usr/src/app/public
      - PRIVATE_DIR=/usr/src/app/private
      - PORT=3000
    volumes:
      - type: bind
        source: ${MEDIA_STORAGE_PATH:-/var/lib/coolify/media_storage}
        target: /usr/src/app/uploads
      - type: bind
        source: ${MEDIA_STORAGE_PATH:-/var/lib/coolify/media_storage}
        target: /usr/src/app/public
      - type: bind
        source: ${MEDIA_STORAGE_PATH:-/var/lib/coolify/media_storage}
        target: /usr/src/app/private
      - type: bind
        source: ${MEDIA_STORAGE_PATH:-/var/lib/coolify/media_storage}
        target: /usr/src/app/logs
    networks:
      coolify:
        aliases:
          - backend
    dns:
      - 127.0.0.11
    dns_search:
      - coolify
    restart: unless-stopped
    stop_grace_period: 30s
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  frontend:
    container_name: frontend-${COOLIFY_SERVICE_ID}
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_BACKEND_URL=/api
    environment:
      - REACT_APP_BACKEND_URL=/api
    depends_on:
      - backend
    networks:
      - coolify
    ports:
      - "80"
    user: nginx
    volumes:
      - type: bind
        source: ${MEDIA_STORAGE_PATH:-/var/lib/coolify/media_storage}
        target: /usr/src/app/uploads

networks:
  coolify:
    name: coolify
    external: true

volumes:
  media_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MEDIA_STORAGE_PATH:-/var/lib/coolify/media_storage}
