worker_processes auto;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /dev/stdout main;
    error_log /dev/stderr debug;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    client_max_body_size 100M;

    # Proxy settings
    proxy_buffers 8 16k;
    proxy_buffer_size 32k;
    proxy_connect_timeout 300;
    proxy_send_timeout 300;
    proxy_read_timeout 300;
    send_timeout 300;

    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    upstream backend_upstream {
        server backend:3000;
        keepalive 32;
    }

    map $request_uri $is_public_route {
        default 0;
        "~^/backend/version"              1;
        "~^/backend/auth/login"           1;
        "~^/backend/auth/refresh_token"   1;
        "~^/backend/public-settings/"     1;
        "~^/backend/companies/cadastro"   1;
    }

    # Extrai o token da query string
    map $args $env_token {
        "~(^|&)token=(?<token>[^&]+)" $token;
        default "";
    }

    server {
        listen 8080 default_server;
        server_name _;

        # API Server - Todas as rotas /backend vão para o backend
        location /backend/ {
            # Verifica autenticação apenas para rotas privadas
            if ($is_public_route = 0) {
                if ($http_authorization = "") {
                    return 401 '{"error": "Unauthorized"}';
                }
            }

            # Remove o prefixo /backend antes de enviar para o upstream
            rewrite ^/backend/(.*) /$1 break;

            # Configuração do proxy
            proxy_pass http://backend_upstream;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Disable buffering for API endpoints
            proxy_buffering off;
            
            # Add debug headers
            add_header X-Debug-Backend-URL $upstream_addr;
            add_header X-Debug-Request-URI $request_uri;
            add_header X-Debug-Upstream-Status $upstream_status;
            add_header X-Debug-Public-Route $is_public_route;
            add_header X-Debug-Token $env_token;

            # Não permita que o Nginx retorne HTML para rotas da API
            proxy_intercept_errors on;
            error_page 404 = @json_404;
            error_page 502 503 504 = @backend_down;
        }

        # Handle Socket.IO
        location /socket.io/ {
            proxy_pass http://backend_upstream/socket.io/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Host $host;
            proxy_set_header Connection "upgrade";
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Increase timeouts for WebSocket
            proxy_connect_timeout 600;
            proxy_send_timeout 600;
            proxy_read_timeout 600;
        }

        # JSON error responses
        location @json_404 {
            default_type application/json;
            return 404 '{"error": "Not Found"}';
        }

        location @backend_down {
            default_type application/json;
            return 502 '{"error": "Backend service is currently unavailable"}';
        }
    }

    # Frontend Server - Separado do servidor de API
    server {
        listen 8080;
        server_name ticket.ebnez.com.br;
        root /usr/share/nginx/html;
        index index.html;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src * data: 'unsafe-eval' 'unsafe-inline'" always;

        # Static files
        location /static/ {
            expires 30d;
            add_header Cache-Control "public, no-transform";
            try_files $uri =404;
        }

        location /public/ {
            alias /usr/src/app/public/;
            expires 30d;
            add_header Cache-Control "public, no-transform";
            try_files $uri =404;
        }

        location /uploads/ {
            alias /usr/src/app/uploads/;
            expires 30d;
            add_header Cache-Control "public, no-transform";
            try_files $uri =404;
        }

        # Optimize serving of static files
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|pdf|txt|woff|woff2|ttf|eot)$ {
            expires 30d;
            add_header Cache-Control "public, no-transform";
            try_files $uri =404;
        }

        # Return 404 for all php files
        location ~ \.php$ {
            return 404;
        }

        # Deny access to hidden files
        location ~ /\. {
            deny all;
            return 404;
        }

        # Health check endpoint
        location = /health {
            access_log off;
            add_header Content-Type text/plain;
            return 200 'OK';
        }

        # Handle React Router - deve vir POR ÚLTIMO
        location / {
            try_files $uri $uri/ /index.html;
            add_header Cache-Control "no-store, no-cache, must-revalidate";
        }
    }
}
